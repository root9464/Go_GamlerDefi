// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/ping": {
            "get": {
                "description": "Ping the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/referral/debt/{author_id}/{referrer_id}": {
            "get": {
                "description": "Getting debt from author to referrer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "getting debt from author to referrer",
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.PaymentOrder"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    }
                }
            }
        },
        "/api/referral/payment-orders/pay": {
            "get": {
                "description": "Pay a payment order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Pay payment order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.CellResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    }
                }
            }
        },
        "/api/referral/payment-orders/pay-all": {
            "get": {
                "description": "Paying all debt from author to referrer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Pay all debt from author to referrer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Author ID",
                        "name": "author_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.CellResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    }
                }
            }
        },
        "/api/referral/precheckout/{user_id}": {
            "get": {
                "description": "Ð¡heck if the user is a referrer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "checking the referrer",
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.ReferrerResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    }
                }
            }
        },
        "/api/referral/validate-invitation-conditions": {
            "get": {
                "description": "Validate invitation conditions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Validate invitation conditions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Author ID",
                        "name": "author_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.CellResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    }
                }
            }
        },
        "/api/referrals/delete/all": {
            "delete": {
                "description": "Delete all payment orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Delete all payment orders",
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/referrals/delete/{order_id}": {
            "delete": {
                "description": "Delete a payment order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Delete payment order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    }
                }
            }
        },
        "/api/referrals/process": {
            "post": {
                "description": "Calculate and distribute referral bonuses between users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Referrals"
                ],
                "summary": "Process of awarding referral bonuses to the user",
                "parameters": [
                    {
                        "description": "Referral processing data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.ReferralProcessRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    }
                }
            }
        },
        "/api/validation/validate": {
            "post": {
                "description": "Validate transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validation"
                ],
                "summary": "Validate transaction",
                "parameters": [
                    {
                        "description": "Transaction",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerTransactionDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction processed successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError"
                        }
                    },
                    "409": {
                        "description": "Failed transaction processing",
                        "schema": {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerTransactionResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "fiber.Map": {
            "type": "object",
            "additionalProperties": true
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.CellResponse": {
            "type": "object",
            "properties": {
                "cell": {
                    "description": "Cell of the response\nrequired: true\nexample: 0QC3PUCoxBdLfOmO8xFQ84TGFPQUatxvvRsSAODKEvjbb4OS",
                    "type": "string"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.LevelRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the level\nrequired: true\nexample: 0QC3PUCoxBdLfOmO8xFQ84TGFPQUatxvvRsSAODKEvjbb4OS",
                    "type": "string"
                },
                "amount": {
                    "description": "Amount of the level\nrequired: true\nminimum: 0\nexample: 150",
                    "type": "number"
                },
                "level_number": {
                    "description": "Level number\nrequired: true\nminimum: 0\nexample: 0",
                    "type": "integer"
                },
                "rate": {
                    "description": "Rate of the level\nrequired: true\nminimum: 0\nexample: 0.2",
                    "type": "number"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.PaymentOrder": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Date of creation\nrequired: true\nexample: 1715731200",
                    "type": "integer"
                },
                "id": {
                    "description": "ID of the payment order\nrequired: false\nminimum: 1\nexample: 12345",
                    "type": "string"
                },
                "leader_id": {
                    "description": "ID of the author\nrequired: true\nminimum: 1\nexample: 12345",
                    "type": "integer"
                },
                "levels": {
                    "description": "Levels of the payment\nrequired: true\nexample: [{\"level_number\": 0, \"rate\": 0.2, \"amount\": 150, \"address\": \"0QC3PUCoxBdLfOmO8xFQ84TGFPQUatxvvRsSAODKEvjbb4OS\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.LevelRequest"
                    }
                },
                "referral_id": {
                    "description": "ID of the referral\nrequired: true\nminimum: 1\nexample: 12345",
                    "type": "integer"
                },
                "referrer_id": {
                    "description": "ID of the referrer\nrequired: true\nminimum: 1\nexample: 12345",
                    "type": "integer"
                },
                "ticket_count": {
                    "description": "Number of tickets to process\nrequired: true\nminimum: 1\nexample: 100",
                    "type": "integer"
                },
                "total_amount": {
                    "description": "Total amount of the payment\nrequired: true\nminimum: 0\nexample: 100.0",
                    "type": "number"
                },
                "tr_hash": {
                    "description": "Transaction hash\nrequired: false\nexample: 1e95861ef87af4c75811a0e3aaebd0ef9044bbc84e31425619405b8158d2795c",
                    "type": "string"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.PaymentType": {
            "type": "string",
            "enum": [
                "accrual_platform",
                "leader_accrual"
            ],
            "x-enum-varnames": [
                "PaymentPlatform",
                "PaymentLeader"
            ]
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.ReferralProcessRequest": {
            "type": "object",
            "required": [
                "payment_type",
                "referral_id",
                "referrer_id",
                "ticket_count"
            ],
            "properties": {
                "leader_id": {
                    "description": "ID of the author\nrequired: true\nminimum: 1\nexample: 12345",
                    "type": "integer"
                },
                "payment_type": {
                    "description": "Type of payment processing\nrequired: true\nenum: accrual_platform,leader_accrual\nexample: accrual_platform",
                    "enum": [
                        "accrual_platform",
                        "leader_accrual"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.PaymentType"
                        }
                    ]
                },
                "referral_id": {
                    "description": "ID of the referred user\nrequired: true\nminimum: 1\nexample: 67890",
                    "type": "integer"
                },
                "referrer_id": {
                    "description": "ID of the referring user\nrequired: true\nminimum: 1\nexample: 12345",
                    "type": "integer"
                },
                "ticket_count": {
                    "description": "Number of tickets to process\nrequired: true\nminimum: 1\nexample: 5",
                    "type": "integer"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.ReferredUserResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo_path": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "telegram": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.ReferrerResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "photo_path": {
                    "type": "string"
                },
                "refer_id": {
                    "type": "integer"
                },
                "referred_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_referral_dto.ReferredUserResponse"
                    }
                },
                "surname": {
                    "type": "string"
                },
                "telegram": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "wallet_address": {
                    "type": "string"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerStatus": {
            "type": "string",
            "enum": [
                "pending",
                "waiting",
                "running",
                "success",
                "failed"
            ],
            "x-enum-varnames": [
                "WorkerStatusPending",
                "WorkerStatusWaiting",
                "WorkerStatusRunning",
                "WorkerStatusSuccess",
                "WorkerStatusFailed"
            ]
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerTransactionDTO": {
            "type": "object",
            "required": [
                "status",
                "target_address",
                "tx_hash",
                "tx_query_id"
            ],
            "properties": {
                "created_at": {
                    "description": "Created at\nrequired: false\nexample: 1715731200",
                    "type": "integer"
                },
                "id": {
                    "description": "ID of the worker transaction\nrequired: false\nexample: \"682a67342a36c14af648479b\"",
                    "type": "string"
                },
                "payment_order_id": {
                    "description": "Payment order ID\nrequired: true\nexample: \"6826ac79ff2f0eb00db5fa1d\"",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the worker transaction\nrequired: true\nexample: \"pending\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerStatus"
                        }
                    ]
                },
                "target_address": {
                    "description": "Target address of the transaction\nrequired: true\nexample: \"0QANsjLvOX2MERlT4oyv2bSPEVc9lunSPIs5a1kPthCXydUX\"",
                    "type": "string"
                },
                "tx_hash": {
                    "description": "Hash of the transaction\nrequired: true\nexample: \"105f7620bf78d534941ebcf97dda0dbe8e79c134a8ab346843787c71fe3308d5\"",
                    "type": "string"
                },
                "tx_query_id": {
                    "description": "Query ID of the transaction\nrequired: true\nexample: 1747000636",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "Updated at\nrequired: false\nexample: 1715731200",
                    "type": "integer"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerTransactionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message of the response\nexample: \"Transaction processed successfully\"",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the worker transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_root9464_Go_GamlerDefi_src_layers_modules_validation_dto.WorkerStatus"
                        }
                    ]
                },
                "tx_hash": {
                    "description": "Transaction of the response\nexample: \"105f7620bf78d534941ebcf97dda0dbe8e79c134a8ab346843787c71fe3308d5\"",
                    "type": "string"
                },
                "tx_id": {
                    "description": "Transaction ID\nexample: \"682a67342a36c14af648479b\"",
                    "type": "string"
                }
            }
        },
        "github_com_root9464_Go_GamlerDefi_src_packages_lib_error.MapError": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Detailed error description\nexample: \"Field 'email' must be valid email address\"",
                    "type": "string"
                },
                "message": {
                    "description": "Error message\nexample: \"invalid request parameters\"",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:6069",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GamlerDefi API",
	Description:      "API for GamlerDefi",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
